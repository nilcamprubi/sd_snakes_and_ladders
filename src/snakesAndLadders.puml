{"text":"@startuml \nskinparam classAttributeIconSize 0\n' this is to use the standard notation for public, protected, private\n\nclass Main {\n- {static} DEATH_SQUARES : int\n- {static} NUM_SQUARES : int\n- {static} PLAYER_NAMES : String[]\n- {static} SNAKES_FROM_TO : int[][]\n- {static} LADDERS_FROM_TO : int[][]\n- {static} main(String[] args)\n}\n\nclass Game {\n    - players : LinkedList<Players>\n    - board : Board\n    - winner : Player\n    + Game(playerNames: String[], numSquares : int, \\n\\t    deathSquares : int[], snakes : int[][], ladders : int[][])\n    + play()\n    - makeBoard(numSquares : int, \\n\\t\\t  snakes : int[][], ladders : int[][])\n    - makePlayers(names : String[])\n    - initializeGame()\n    - placePlayersAtFirstSquare()\n    - notOver() : boolean\n    - movePlayer(roll : int)\n    - currentPlayer() : Player\n    - playersLeft() : boolean\n}\n\nclass Board {\n    - {static} MIN_NUM_SQUARES : int\n    + Board(numSquares : int, snakes : int[][], ladders : int[][])\n    + firstSquare() : Square\n    + lastSquare() : Square\n    + findSquare() : Square\n    + numberOfSquares() : int\n    - makeSquares(numSquares : int)\n    - makeSnakesOrLadders(toFrom : int[][])\n    - makeDeaths(deaths : int[])\n}\n\nclass Die {\n    - {static} MIN_VALUE : int = 1\n    - {static} MAX_VALUE : int = 6\n    + roll() : int\n}\n\nclass Square {\n    # position : int\n    + Square(pos : int, board : Board)\n    + isLastSquare() : boolean\n    + enter(p : Player)\n    + leave(p : Player)\n    + isOccupied() : boolean\n    + getPosition() : int\n    + moveAndLand(moves : int)\n    # landHereOrGoHome() : Square\n    # findRelativeSquare(shift : int) : Square\n    # findFirstSquare() : Square\n}\n\nclass Player {\n- name : String\n- dead : boolean\n+ moveForward(moves : int)\n+ getPosition() : int\n+ wins() : boolean\n+ isDead() : boolean\n+ setDead(dead : boolean)\n}\n\nclass Death extends Square {\n+ Death(pos : int, b : Board)\n+ enter(p : Player)\n}\n\nclass SnakeOrLadder extends Square {\n    - transport : int\n    # landHereOrGoHome() : Square\n    - destination() : Square\n}\n\nclass FirstSquare extends Square {\n    + FirstSquare(board : Board)\n    + isOccupied() : boolean\n    + enter(p : Player)\n    + leave(p : Player)\n}\n\n' relative position of classes not related by association\n' or composition with hidden arrows\nMain -[hidden]right-> Game\nGame -[hidden]down-> Die\n\n'associations\nGame x--right--> \"1\" Board : board\nBoard \"1\\nboard\" *-down-> \"10...*\" Square : squares\nGame *-down-> \"1..*\" Player : players\nGame x-down-> \"0,1\" Player : winner\nSquare -left-> \"0,1\" Player : player\nPlayer -right-> \"1\" Square : square\nFirstSquare -left-> \"*\" Player : players\n@enduml","drawing":"d3Jk8AEACAAyFA0AAAAAFQAAAAAdAAAAACUAAAAAOg4IABD\/\/\/\/\/\/\/\/\/\/38YAEIQHjs3ZsacTDm16gR9LkQthw=="}